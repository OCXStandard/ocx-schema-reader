[project]
name = "ocx_schema_reader"
version = "0.1.0"
description = "A command line interface for reading and parsing the OCX schema"
authors = ["ocastrup <ole.christian.astrup@dnv.com>"]
license = "MIT"
repository = "https://github.com/OCXStandard/ocx-schema-reader"
documentation = "https://ocx-schema-reader.readthedocs.io/en/latest/index.html"
readme = "README.md"
# Classifiers: http://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    # Development Status :: 1 - Planning
    # Development Status :: 2 - Pre-Alpha
    # Development Status :: 3 - Alpha
    # Development Status :: 4 - Beta
    # Development Status :: 5 - Production/Stable
    # Development Status :: 6 - Mature
    # Development Status :: 7 - Inactive
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
]
packages = ["ocx_xml"]

[project.scripts]
ocx-schema-reader = 'main.py:cli'

[tool.poetry]
name = "ocx_schema_reader"
version = "0.1.0"
description = "A command line interface for reading and parsing the OCX schema"
authors = ["ocastrup <ole.christian.astrup@dnv.com>"]
license = "MIT"
repository = "https://github.com/OCXStandard/ocx-schema-reader"
documentation = "https://ocx-schema-reader.readthedocs.io/en/latest/index.html"
readme = "README.md"
# Classifiers: http://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    # Development Status :: 1 - Planning
    # Development Status :: 2 - Pre-Alpha
    # Development Status :: 3 - Alpha
    # Development Status :: 4 - Beta
    # Development Status :: 5 - Production/Stable
    # Development Status :: 6 - Mature
    # Development Status :: 7 - Inactive
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
]
[tool.poetry.scripts]
ocx-schema-reader = 'main:cli'


[tool.poetry.dependencies]
python = "^3.10"
pyyaml = "^6.0"
click = "^8.1.3"
click-logging = "^1.0.1"
colorlog = "^6.7.0"
fuzzywuzzy = "^0.18.0"
tabulate = "0.9.0"
python-Levenshtein = "^0.20.8"
lxml = "~4.9.2"
requests = "2.28.1"
furo = "^2022.12.7"
numpy = "^1.23.5"
click-extra = "^3.5.0"
click-shell = "^2.1"
Sphinx = "^5.3.0"


[tool.poetry.dev-dependencies]
Sphinx = "^5.3.0"
sphinx-autodoc-typehints = "^1.19.5"
pre-commit = "^2.20.0"
black = "^22.10.0"
isort = "^5.11.2"
autoflake = "^2.0.0"
flake8 = "^6.0.0"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
coverage = "^6.5.0"
pytest-regressions = "^2.4.1"
sphinx-click = "^4.3.0"
setuptools = "^65.6.3"
bandit = "^1.7.4"
bump2version = "^1.0.1"


[build-system]
# requires = ["poetry-core>=1.0.0"]
# build-backend = "poetry.core.masonry.api"
#requires = ["setuptools"]
#build-backend = "setuptools.build_meta"

[tool.black]
line-length = 119
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
[tool.pycln]
all = true

[tool.isort]
line_length = 79
multi_line_output = 3
include_trailing_comma = true

[tool.tbump.version]
current = "0.1.0"
# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''
[tool.bandit]
exclude_dirs = ["tests", "dist", "docs", "schema_versions", ".venv"]
# tests = ["B201", "B301"]
skips = ["B320", "B410"]

#[tool.tbump.git]
#message_template = "Bump to {new_version}"
#tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
#[[tool.tbump.file]]
#src = "README.md"

#[[tool.tbump.file]]
#src = "pyproject.toml"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"


